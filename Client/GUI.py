from PyQt5.QtWidgets import *
from PyQt5 import uic
from PyQt5.QtCore import *
import json
import Client 
import sys


# Qthread for checking for messages
class Listener_Thread(QThread):
    def __init__(self, parent=None):
        super().__init__(parent)

    # Signal Variable
    msg_stat = pyqtSignal(str)

    def run(self):
        # Variables from parent class
        cli = self.parent().client
        user_id = self.parent().user_id

        while True:
            msg = cli.recv_msg()
            data = json.loads(msg.decode())
            # Checks my user_id and message's user_id , we need to add msgs which are not generated by us
            if int(user_id) != int(data["USER_ID"]):
                message = f"{data['USERNAME']} : {data['MESSAGE']} "
                # Emits the data
                self.msg_stat.emit(message)


# GUI Window Class
class Window(QMainWindow):
    def __init__(self):
        super(Window, self).__init__()
        self.thread = None

        # Loads .ui file
        uic.loadUi('UI\\messager_v2.ui', self)

        # gets the widgets from file to modify the widget
        self.scroll_area = self.findChild(QScrollArea, "scrollArea")
        self.scrollAreaWidgetContents = self.findChild(QWidget, "scrollAreaWidgetContents")
        self.button = self.findChild(QPushButton, "pushButton")
        self.edit = self.findChild(QLineEdit, "lineEdit")
        self.verticalLayout_4 = self.findChild(QVBoxLayout, "verticalLayout_4")
        self.scroll_area = self.findChild(QScrollArea, "scrollArea")
        self.username_ = self.findChild(QLineEdit, "lineEdit_2")
        self.user_id_ = self.findChild(QLineEdit, "lineEdit_3")
        self.chatroom = "X0X0"
        self.username_.setText("sabari")
        self.user_id_.setText('001')

        self.username, self.user_id = self.username_.text(), self.user_id_.text()
        # Connecting button to a function
        self.button.clicked.connect(self.frame_msg)

        # CONNECTION WITH SERVER
        self.client = Client.Connect_Init()

        # Recv Thread
        self.Thread_init()

    # Func to connect the Qthread class
    def Thread_init(self):
        self.thread = Listener_Thread(self) 
        self.thread.msg_stat.connect(self.add_msg)
        self.thread.start()

    # Clears text in lineEdit and retrieves the msg and Calls the func to add the msg to scrollArea
    def frame_msg(self):
        text = self.edit.text()
        data = f'{self.username} : {text}'
        self.edit.clear()
        self.add_msg(data, 1)
        self.client.Frame_POST(self.user_id, self.username, self.chatroom, text)

    # Makes a Frame/Layout/Label and Adds the ScrollArea
    def add_msg(self, msg, me=0):
        frame = QFrame(self.scrollAreaWidgetContents)
        frame.setObjectName(u"frame")
        frame.setMinimumSize(QSize(0, 60))
        frame.setFrameShape(QFrame.StyledPanel)
        frame.setFrameShadow(QFrame.Raised)
        horizontalLayout = QHBoxLayout(frame)
        horizontalLayout.setObjectName(u"horizontalLayout_5")
        if me:
            label_2 = QLabel(frame)
            label_2.setObjectName(u"label_2")
            label_2.setMaximumSize(QSize(400, 16777215))
            label_2.setStyleSheet(u"background-color:  #F0EAEA;\n" \
                                  "border-radius: 13px;\n" \
                                  "padding: 15px;")
            label_2.setText(msg)

            if len(msg) > 50:
                label_2.setWordWrap(True)

            horizontalLayout.addWidget(label_2)

            horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

            horizontalLayout.addItem(horizontalSpacer)


            self.verticalLayout_4.addWidget(frame)
        else:
            label_2 = QLabel(frame)
            label_2.setObjectName(u"label_2")
            label_2.setMaximumSize(QSize(400, 16777215))
            label_2.setStyleSheet(u"background-color:  #F0EAEA;\n" \
                                  "border-radius: 13px;\n" \
                                  "padding: 15px;")
            label_2.setText(msg)
            

            if len(msg) > 50:
                label_2.setWordWrap(True)

            

            horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

            horizontalLayout.addItem(horizontalSpacer)
            horizontalLayout.addWidget(label_2)


            self.verticalLayout_4.addWidget(frame)

        
        max_value = self.scrollAreaWidgetContents.size().height()
        self.scroll_area.verticalScrollBar().setMaximum(max_value)
        self.scroll_area.verticalScrollBar().setValue(max_value)


# Runs the class only if it's the main file and not run while importing it !
if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = Window()
    win.setWindowTitle("Messaging_Application")
    win.show()
    sys.exit(app.exec_())
